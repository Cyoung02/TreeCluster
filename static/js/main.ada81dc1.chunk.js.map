{"version":3,"sources":["components/TreeSelect.js","components/Cluster.js","components/Method.js","components/Threshold.js","components/Sidebar.js","algorithms/treecluster.js","App.js","index.js"],"names":["TreeSelect","type","onChange","this","props","handleFileSelect","React","Component","Cluster","onClick","performClustering","Method","handleMethodChange","Threshold","id","min","max","defaultValue","step","handleThresholdChangeSlider","handleThresholdChangeBox","Sidebar","ref","createRef","document","addEventListener","escFunction","removeEventListener","Fragment","className","style","transform","xPosition","width","closeMenu","App","event","persist","setState","fileName","target","files","name","fileSize","size","fr","FileReader","onload","getElementById","textContent","result","tree","readAsText","console","log","method","value","threshold","state","sidebarSize","open","openMenu","setTimeout","keyCode","ReactDOM","render","StrictMode"],"mappings":"4NAeeA,G,mLAXX,OACE,8BACE,6BACE,qDACA,2BAAOC,KAAK,OAAOC,SAAUC,KAAKC,MAAMC,yB,GANzBC,IAAMC,YCUhBC,E,uKARX,OACE,4BAAQC,QAASN,KAAKC,MAAMM,mBAA5B,0B,GAHgBJ,IAAMC,WCsBbI,E,uKApBX,OACE,8BACE,6BACE,qDACA,4BAAQT,SAAUC,KAAKC,MAAMQ,oBAC3B,iDACA,iDACA,gDACA,0CACA,gDACA,uCACA,iDACA,+D,GAdSN,IAAMC,WC6BZM,E,uKA3BX,OACE,8BACE,6BACE,6CACA,2BACEC,GAAG,SACHb,KAAK,QACLc,IAAI,IACJC,IAAI,IACJC,aAAa,MACbC,KAAK,OACLhB,SAAUC,KAAKC,MAAMe,8BAEvB,2BAAOlB,KAAK,SACVa,GAAG,MACHC,IAAI,IACJC,IAAI,IACJC,aAAa,MACbC,KAAK,OACLhB,SAAUC,KAAKC,MAAMgB,iC,GArBTd,IAAMC,WCyCfc,E,kDAnCb,aAAe,IAAD,8BACZ,gBACKC,IAAMhB,IAAMiB,YAFL,E,gEAMZC,SAASC,iBAAiB,UAAWtB,KAAKC,MAAMsB,e,6CAIhDF,SAASG,oBAAoB,UAAWxB,KAAKC,MAAMsB,e,+BAG3C,IAAD,OACP,OACE,kBAAC,IAAME,SAAP,KACE,yBAAKC,UAAU,UACbC,MAAO,CACLC,UAAU,cAAD,OAAgB5B,KAAKC,MAAM4B,UAA3B,OACTC,MAAM,GAAD,OAAK9B,KAAKC,MAAM6B,MAAhB,QAEP,yBAAKJ,UAAU,WACb,4BAAQf,GAAG,QAAQL,QAAS,kBAAM,EAAKL,MAAM8B,cAA7C,SACA,kBAAC,EAAD,CAAY7B,iBAAkBF,KAAKC,MAAMC,mBACzC,kBAAC,EAAD,CAAQO,mBAAoBT,KAAKC,MAAMQ,qBACvC,kBAAC,EAAD,CAAWO,4BAA6BhB,KAAKC,MAAMe,4BACjDC,yBAA0BjB,KAAKC,MAAMgB,2BACvC,kBAAC,EAAD,CAASV,kBAAmBP,KAAKC,MAAMM,2B,GA5B7BJ,IAAMC,WCqHrB,ICWQ4B,E,kDAjIb,WAAY/B,GAAQ,IAAD,8BACjB,cAAMA,IAkBRC,iBAAmB,SAAC+B,GAClBA,EAAMC,UACN,EAAKC,SAAS,CACZC,SAAUH,EAAMI,OAAOC,MAAM,GAAGC,KAChCC,SAAUP,EAAMI,OAAOC,MAAM,GAAGG,OAElC,IAAMC,EAAK,IAAIC,WACfD,EAAGE,OAAS,SAACX,GACXZ,SAASwB,eAAe,UAAUC,YAAYJ,EAAGK,OACjD,EAAKZ,SAAS,CACZa,KAAMN,EAAGK,UAGbL,EAAGO,WAAWhB,EAAMI,OAAOC,MAAM,IACjCY,QAAQC,IAAIlB,IAjCK,EAuCnB1B,kBAAoB,SAAC0B,GDgFrBiB,QAAQC,IAAI,UCvHO,EAiDnB1C,mBAAqB,SAACwB,GACpB,EAAKE,SAAS,CACZiB,OAAQnB,EAAMI,OAAOgB,SAnDN,EA2DnBrC,4BAA8B,SAACiB,GAC7B,EAAKE,SAAS,CACZmB,UAAWrB,EAAMI,OAAOgB,QAE1BhC,SAASwB,eAAe,OAAOQ,MAAQhC,SAASwB,eAAe,UAAUQ,OA/DxD,EAsEnBpC,yBAA2B,SAACgB,GAC1B,EAAKE,SAAS,CACZmB,UAAWrB,EAAMI,OAAOgB,QAE1BhC,SAASwB,eAAe,UAAUQ,MAAQhC,SAASwB,eAAe,OAAOQ,OA1ExD,EAgFnBtB,UAAY,WACV,EAAKI,SAAS,CACZN,WAAY,EAAK0B,MAAMC,YACvBC,MAAM,KAnFS,EA2FnBC,SAAW,WACT,EAAKvB,SAAS,CACZN,UAAW,IAEb8B,YAAW,WACT,EAAKxB,SAAS,CAACsB,MAAM,MACpB,MAjGc,EAoGnBlC,YAAc,SAACU,GACQ,KAAlBA,EAAM2B,SAAkB,EAAKL,MAAME,MACpC,EAAK1B,aAnGP,EAAKwB,MAAQ,CACXnB,SAAU,GACVI,SAAU,GACVQ,KAAM,GACNI,OAAQ,gBACRE,UAAW,MACXE,YAAa,IACb3B,UAAW,EACX4B,MAAM,GAXS,E,qDA0GT,IAAD,OACP,OACE,kBAAC,IAAMhC,SAAP,KACE,kBAAC,EAAD,CACEK,MAAO9B,KAAKuD,MAAMC,YAClB3B,UAAW7B,KAAKuD,MAAM1B,UACtBN,YAAavB,KAAKuB,YAClBQ,UAAW/B,KAAK+B,UAChB2B,SAAU1D,KAAK0D,SACfxD,iBAAkBF,KAAKE,iBACvBO,mBAAoBT,KAAKS,mBACzBO,4BAA6BhB,KAAKgB,4BAClCC,yBAA0BjB,KAAKiB,yBAC/BV,kBAAmBP,KAAKO,oBAE1B,4BAAQD,QAAS,kBAAM,EAAKoD,aAA5B,QAEA,yBAAK/C,GAAG,gB,GA5HER,IAAMC,WCDxByD,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF1C,SAASwB,eAAe,U","file":"static/js/main.ada81dc1.chunk.js","sourcesContent":["import React from 'react';\n\nclass TreeSelect extends React.Component {\n  render() {\n    return (\n      <form>\n        <div>\n          <label>Select a TreeFile:</label>\n          <input type=\"file\" onChange={this.props.handleFileSelect} />\n        </div> \n      </form>\n    );\n  }\n}\n\nexport default TreeSelect;\n","import React from 'react';\n\nclass Cluster extends React.Component {\n  render() {\n    return (\n      <button onClick={this.props.performClustering}>\n        Perform Clustering\n      </button>\n    );\n  }\n}\n\nexport default Cluster;\n","import React from 'react';\n\nclass Method extends React.Component {\n  render() {\n    return (\n      <form>\n        <div>\n          <label>Clustering Method:</label>\n          <select onChange={this.props.handleMethodChange}>\n            <option>Maximum Clade</option>\n            <option>Average Clade</option>\n            <option>Median Clade</option>\n            <option>Length</option>\n            <option>Length Clade</option>\n            <option>Max</option>\n            <option>Root Distance</option>\n            <option>Single Linkage Clade</option>\n          </select>\n        </div> \n      </form>\n    );\n  }\n}\n\nexport default Method;\n","import React from 'react';\n\nclass Threshold extends React.Component {\n  render() {\n    return (\n      <form>\n        <div>\n          <label>Threshold:</label>\n          <input \n            id='slider'\n            type='range' \n            min='0' \n            max='1' \n            defaultValue='0.5' \n            step='0.01' \n            onChange={this.props.handleThresholdChangeSlider} \n          />\n          <input type='number'\n            id='box'\n            min='0'\n            max='1'\n            defaultValue='0.5'\n            step='0.01'\n            onChange={this.props.handleThresholdChangeBox}\n          />\n        </div> \n      </form>\n    );\n  }\n}\n\nexport default Threshold;\n","import React from 'react';\nimport './Sidebar.css';\nimport TreeSelect from './TreeSelect';\nimport Cluster from './Cluster.js';\nimport Method from './Method.js';\nimport Threshold from './Threshold.js';\n\nclass Sidebar extends React.Component {\n  constructor() {\n    super() \n    this.ref = React.createRef()\n  }\n\n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.props.escFunction);\n  }\n  \n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.props.escFunction);\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <div className='sidebar' \n          style={{\n            transform: `translatex(${this.props.xPosition}px)`,\n            width: `${this.props.width}px`\n          }}>\n          <div className='content'>\n            <button id='close' onClick={() => this.props.closeMenu()}>close</button>\n            <TreeSelect handleFileSelect={this.props.handleFileSelect} />\n            <Method handleMethodChange={this.props.handleMethodChange} />\n            <Threshold handleThresholdChangeSlider={this.props.handleThresholdChangeSlider} \n              handleThresholdChangeBox={this.props.handleThresholdChangeBox} />\n            <Cluster performClustering={this.props.performClustering} />\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n};\n\nexport default Sidebar;\n","import {Queue} from './Queue';\nimport {PriorityQueue} from './PriorityQueue';\nimport {Tree, TreeNode} from './TreeSwift';\n\nexport function merge_two_sorted_lists(x,y) { \n  const out = [];\n  let i = 0;\n  let j = 0;\n  while (i < x.length && j < y.length) {\n    if (x[i] < y[j]) {\n      out.push(x[i]);\n      i++;\n    } else {\n      out.push(y[j]);\n      j++;\n    }\n  }\n  while (i < x.length) {\n    out.push(x[i]);\n    i++;\n  }\n  while (j < y.length) {\n    out.push(y[j]);\n    j++;\n  }\n  return out;\n}\n\nexport function merge_multi_sorted_lists(lists) {\n  const pq = new PriorityQueue();\n  for (let l = 0; l < lists.length; l++) {\n    if (lists[l].length !== 0) {\n      pq.put(lists[l][0], l);\n    }\n  }\n  const inds = Array(lists.length).fill(1);\n  const out = [];\n  while (!pq.empty()) {\n    let curr = pq.get();\n    let d = curr.priority;\n    let l = curr.value;\n    out.push(d);\n    if (inds[l] < lists[l].length) {\n      pq.put(lists[l][inds[l]],l);\n    }\n    inds[l] = inds[l] + 1;\n  }\n  return out;\n}\n\nexport function median(x) {\n  if (x.length % 2 !== 0) {\n    return x[parseInt(x.length / 2)];\n  } else {\n    return (x[x.length / 2] + x[(x.length / 2) - 1]) / 2;\n  }\n}\n\nexport function avg(x) {\n  return x.reduce((a,b) => a+b) / x.length;\n}\n\nexport function p_to_jc(d,seq_type) {\n  if (seq_type === 'dna') {\n    return -0.75 * Math.log(1 - (d / 0.75));\n  } else if (seq_type === 'protein') {\n    return -0.95 * Math.log(1 - (d / 0.95));\n  }\n}\n\nexport function cut(node) {\n  const cluster = [];\n  const descendants = new Queue();\n  descendants.put(node);\n  while (!descendants.empty()) {\n    const descendant = descendants.get();\n    if (descendant.DELETED) {\n      continue;\n    }\n    descendant.DELETED = true;\n    descendant.left_dist = 0;\n    descendant.right_dist = 0;\n    descendant.edge_length = 0;\n    if (descendant.is_leaf()) {\n      cluster.push(descendant.to_string());\n    }\n    else {\n      descendant.children.forEach(element => descendants.put(element));\n    }\n  }\n  return cluster;\n}\n\nexport function prep(tree, support){\n  tree.resolve_polytomies();\n  tree.suppress_unifurcations();\n  const leaves = new Set();\n  tree.traverse_postorder().forEach(function(node) {\n    if (node.edge_length === null) {\n      node.edge_length = 0;\n    }\n    node.DELETED = false;\n    if (node.is_leaf()) {\n      leaves.add(node.to_string());\n    }\n    else {\n      if (node.to_string() === '') {\n        node.confidence = 100;\n      }\n      else {\n        node.confidence = Number(node.to_string());\n      }\n      if (node.confidence < support) {\n        node.edge_length = Infinity;\n      }\n    }\n  });\n  return leaves;\n}\n\nexport function pairwise_dists_below_thresh(tree,threshold) {\n  //TODO\n}\n\nexport const test = () => {\n  console.log(\"hello\");\n}\n","import React from 'react';\nimport './App.css';\nimport Sidebar from './components/Sidebar.js';\nimport * as treecluster from './algorithms/treecluster.js';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      fileName: '',\n      fileSize: '',\n      tree: '',\n      method: 'Maximum Clade',\n      threshold: '0.5',\n      sidebarSize: 200,\n      xPosition: 0,\n      open: true\n    }\n  }\n\n  /*\n   * Reads the file into the tree state variable\n   * TODO check for invalid tree\n   */\n  handleFileSelect = (event) => {\n    event.persist()\n    this.setState({\n      fileName: event.target.files[0].name,\n      fileSize: event.target.files[0].size\n    });\n    const fr = new FileReader();\n    fr.onload = (event) => {\n      document.getElementById('tester').textContent=fr.result;\n      this.setState({\n        tree: fr.result\n      });\n    }\n    fr.readAsText(event.target.files[0]);\n    console.log(event)\n  }\n\n  /*\n   * performs clustering analyses\n   */\n  performClustering = (event) => {\n    //TODO perform clustering analyses\n    treecluster.test();\n  }\n\n  /*\n   * Update the clustering method state variable\n   * when the clustering method is altered\n   * TODO Add Clustering Method Description\n   */\n  handleMethodChange = (event) => {\n    this.setState({\n      method: event.target.value\n    });\n  }\n\n  /*\n   * When the clustering threshold slider changes, set\n   * the box to match and update the state variable\n   */\n  handleThresholdChangeSlider = (event) => {\n    this.setState({\n      threshold: event.target.value\n    });\n    document.getElementById('box').value = document.getElementById('slider').value;\n  }\n  \n  /*\n   * When the clustering threshold box changes, set the\n   * slider to match and update the state variable\n   */\n  handleThresholdChangeBox = (event) => {\n    this.setState({\n      threshold: event.target.value\n    });\n    document.getElementById('slider').value = document.getElementById('box').value;\n  }\n\n  /*\n   * closes sidebar\n   */\n  closeMenu = () => {\n    this.setState({\n      xPosition: -this.state.sidebarSize,\n      open: false\n    });\n  }\n\n  /*\n   * opens sidebar and sets open state\n   * to prevent abrupt closing animations\n   */\n  openMenu = () => {\n    this.setState({\n      xPosition: 0\n    });\n    setTimeout(() => { \n      this.setState({open: true}); \n    }, 500);\n  }\n \n  escFunction = (event) => {\n    if(event.keyCode === 27 && this.state.open) {\n      this.closeMenu();\n    }\n  }\n\n  render() { \n    return (\n      <React.Fragment>\n        <Sidebar \n          width={this.state.sidebarSize}\n          xPosition={this.state.xPosition}\n          escFunction={this.escFunction}\n          closeMenu={this.closeMenu}\n          openMenu={this.openMenu}\n          handleFileSelect={this.handleFileSelect}\n          handleMethodChange={this.handleMethodChange}\n          handleThresholdChangeSlider={this.handleThresholdChangeSlider}\n          handleThresholdChangeBox={this.handleThresholdChangeBox}\n          performClustering={this.performClustering}\n        />\n        <button onClick={() => this.openMenu()}>menu\n        </button>\n        <pre id='tester'></pre>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}